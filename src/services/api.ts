import { CheckUp, Emotion, Reminder, AnalyticsData, DeviceIntegration, Recommendation } from '../types';

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–º–æ—Ü–∏–π
export const EMOTIONS: Emotion[] = [
  { id: '1', name: '–†–∞–¥–æ—Å—Ç—å', emoji: 'üòä', color: '#fbbf24', intensity: 8 },
  { id: '2', name: '–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', emoji: 'üòå', color: '#10b981', intensity: 7 },
  { id: '3', name: '–ì—Ä—É—Å—Ç—å', emoji: 'üò¢', color: '#3b82f6', intensity: 4 },
  { id: '4', name: '–¢—Ä–µ–≤–æ–≥–∞', emoji: 'üò∞', color: '#f59e0b', intensity: 3 },
  { id: '5', name: '–ó–ª–æ—Å—Ç—å', emoji: 'üò†', color: '#ef4444', intensity: 2 },
  { id: '6', name: '–£—Å—Ç–∞–ª–æ—Å—Ç—å', emoji: 'üò¥', color: '#8b5cf6', intensity: 3 },
  { id: '7', name: '–≠–Ω–µ—Ä–≥–∏—è', emoji: '‚ö°', color: '#f59e0b', intensity: 9 },
  { id: '8', name: '–õ—é–±–æ–≤—å', emoji: '‚ù§Ô∏è', color: '#ec4899', intensity: 10 },
];

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–µ–∫-–∞–ø–∞–º–∏
export const checkUpAPI = {
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫-–∞–ø
  saveCheckUp: async (checkUp: Omit<CheckUp, 'id'>): Promise<CheckUp> => {
    await new Promise(resolve => setTimeout(resolve, 500)); // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
    
    const newCheckUp: CheckUp = {
      ...checkUp,
      id: Date.now().toString(),
    };
    
    const checkUps = JSON.parse(localStorage.getItem('emotrack-checkups') || '[]');
    checkUps.push(newCheckUp);
    localStorage.setItem('emotrack-checkups', JSON.stringify(checkUps));
    
    return newCheckUp;
  },

  // –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–∞–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getCheckUps: async (userId: string): Promise<CheckUp[]> => {
    await new Promise(resolve => setTimeout(resolve, 300));
    
    const checkUps = JSON.parse(localStorage.getItem('emotrack-checkups') || '[]');
    return checkUps.filter((c: CheckUp) => c.userId === userId);
  },

  // –ü–æ–ª—É—á–∏—Ç—å —á–µ–∫-–∞–ø—ã –∑–∞ –ø–µ—Ä–∏–æ–¥
  getCheckUpsByPeriod: async (userId: string, days: number): Promise<CheckUp[]> => {
    const checkUps = await checkUpAPI.getCheckUps(userId);
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);
    
    return checkUps.filter((c: CheckUp) => new Date(c.timestamp) >= cutoffDate);
  },
};

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
export const analyticsAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
  getAnalytics: async (userId: string, period: 'week' | 'month' | 'year'): Promise<AnalyticsData> => {
    await new Promise(resolve => setTimeout(resolve, 500));
    
    const days = period === 'week' ? 7 : period === 'month' ? 30 : 365;
    const checkUps = await checkUpAPI.getCheckUpsByPeriod(userId, days);
    
    if (checkUps.length === 0) {
      return {
        period,
        averageMood: 0,
        averageEnergy: 0,
        averageStress: 0,
        emotionDistribution: {},
        trends: [],
      };
    }
    
    const averageMood = checkUps.reduce((sum, c) => sum + c.mood, 0) / checkUps.length;
    const averageEnergy = checkUps.reduce((sum, c) => sum + c.energy, 0) / checkUps.length;
    const averageStress = checkUps.reduce((sum, c) => sum + c.stress, 0) / checkUps.length;
    
    const emotionDistribution: { [emotionId: string]: number } = {};
    checkUps.forEach(c => {
      emotionDistribution[c.emotion.id] = (emotionDistribution[c.emotion.id] || 0) + 1;
    });
    
    const trends = checkUps.map(c => ({
      date: c.timestamp,
      mood: c.mood,
      energy: c.energy,
      stress: c.stress,
    }));
    
    return {
      period,
      averageMood,
      averageEnergy,
      averageStress,
      emotionDistribution,
      trends,
    };
  },
};

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
export const reminderAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  getReminders: async (userId: string): Promise<Reminder[]> => {
    const reminders = JSON.parse(localStorage.getItem('emotrack-reminders') || '[]');
    return reminders.filter((r: Reminder) => r.userId === userId);
  },

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  saveReminder: async (reminder: Omit<Reminder, 'id'>): Promise<Reminder> => {
    const newReminder: Reminder = {
      ...reminder,
      id: Date.now().toString(),
    };
    
    const reminders = JSON.parse(localStorage.getItem('emotrack-reminders') || '[]');
    reminders.push(newReminder);
    localStorage.setItem('emotrack-reminders', JSON.stringify(reminders));
    
    return newReminder;
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
  updateReminder: async (id: string, updates: Partial<Reminder>): Promise<Reminder> => {
    const reminders = JSON.parse(localStorage.getItem('emotrack-reminders') || '[]');
    const index = reminders.findIndex((r: Reminder) => r.id === id);
    
    if (index !== -1) {
      reminders[index] = { ...reminders[index], ...updates };
      localStorage.setItem('emotrack-reminders', JSON.stringify(reminders));
      return reminders[index];
    }
    
    throw new Error('Reminder not found');
  },
};

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
export const deviceAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  getDevices: async (userId: string): Promise<DeviceIntegration[]> => {
    const devices = JSON.parse(localStorage.getItem('emotrack-devices') || '[]');
    return devices.filter((d: DeviceIntegration) => d.id.includes(userId));
  },

  // –ü–æ–¥–∫–ª—é—á–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
  connectDevice: async (userId: string, device: Omit<DeviceIntegration, 'id' | 'userId' | 'lastSync'>): Promise<DeviceIntegration> => {
    const newDevice: DeviceIntegration = {
      ...device,
      id: `${userId}-${device.type}-${Date.now()}`,
      lastSync: new Date().toISOString(),
    };
    
    const devices = JSON.parse(localStorage.getItem('emotrack-devices') || '[]');
    devices.push(newDevice);
    localStorage.setItem('emotrack-devices', JSON.stringify(devices));
    
    return newDevice;
  },
};

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
export const recommendationAPI = {
  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  getRecommendations: async (userId: string): Promise<Recommendation[]> => {
    // Mock —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —á–µ–∫-–∞–ø–æ–≤
    const checkUps = await checkUpAPI.getCheckUpsByPeriod(userId, 7);
    const recommendations: Recommendation[] = [];
    
    if (checkUps.length > 0) {
      const lastCheckUp = checkUps[checkUps.length - 1];
      
      if (lastCheckUp.mood < 5) {
        recommendations.push({
          id: '1',
          title: '–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è',
          description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 10-–º–∏–Ω—É—Ç–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è',
          category: 'mindfulness',
          priority: 'high',
          completed: false,
        });
      }
      
      if (lastCheckUp.energy < 5) {
        recommendations.push({
          id: '2',
          title: '–ü—Ä–æ–≥—É–ª–∫–∞ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ',
          description: '15-–º–∏–Ω—É—Ç–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –ø–æ–º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å —ç–Ω–µ—Ä–≥–∏–∏',
          category: 'exercise',
          priority: 'medium',
          completed: false,
        });
      }
      
      if (lastCheckUp.stress > 7) {
        recommendations.push({
          id: '3',
          title: '–î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è',
          description: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É 4-7-8 –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞',
          category: 'mindfulness',
          priority: 'high',
          completed: false,
        });
      }
    }
    
    return recommendations;
  },
};
